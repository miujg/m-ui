@import "../common/var.scss";

// b(button) ==> m-button
@mixin b($block) {
  $B: $namespace+ '-' +$block;
  .#{$B} {
    @content;
  }
}

// when(disabled) ==> is-disabled
@mixin when($state) {
  @at-root {
    &.#{$state-prefix+$state} {
      @content;
    }
  }
}

// m(default) ==> &--default
@mixin m($modifier) {
  @at-root {
    #{&+$modifier-separator+$modifier} {
      @content;
    }
  }
}

// m(label) ==> &__label 
@mixin e($element) {
  @at-root {
    #{&+$element-separator+$element} {
      @content;
    }
  }
}

@mixin button-type($color, $background-color, $border-color) {
  color: $color;
  border-color: $border-color;
  background-color: $background-color;
}

// 根据breakpoints 返回正确的媒体查询条件
@mixin get-media($key, $map: $breakpoints){
  // @media screen and (min-width: 992px) {
  //   @content;
  // }
  // 判断key在不在map里面
  @if map-has-key($map, $key) {
    @media only screen and #{unquote(map-get($map, $key))}{
    // @media screen and (min-width: 992px) {
      @content;
    }
  } @else {
    @warn "Undefined points: `#{$map}`";
  }
}